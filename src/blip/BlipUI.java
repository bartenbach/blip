/*
 * blip
 * Attribute Only (Public) License
    Version 0.a5, Feb 07, 2012
    
Copyright (C) 2012 Blake Bartenbach <SeeD419@gmail.com> (@SeeD419)

Anyone is allowed to copy and distribute verbatim or modified 
copies of this license document and altering is allowed as long 
as you attribute the author(s) of this license document / files.
*/
package blip;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;

/**
 *
 * @author seed419
 */
public class BlipUI extends javax.swing.JFrame {
    
    
    private static final String version = "0.3 Alpha";
    private static final long serialVersionUID = 1L;
    private String inter;
    private String essid;
    private int status = 999;
    private ConfigurationFile config;
    private UIHandler u;
    
    /**
     * Creates new form blip
     */
    public BlipUI() {
        centerWindow();
        initComponents();
        u = new UIHandler(this);
        u.init();
    }
    
    public void checkEncryptionBox() {
        if (encryptionCheckBox.isSelected()) {
            WPAButton.setSelected(true);
            WPAButton.setEnabled(true);
            WEPButton.setEnabled(true);
            encryptionKeyTextField.setEnabled(true);
        } else {
            WPAButton.setEnabled(false);
            WEPButton.setEnabled(false);
            encryptionKeyTextField.setEnabled(false);
        }      
    }
    
    public void setProgressLabel(String text) {
        progressLabel.setText(text);
    }
    
    public void setProgressBar(Boolean bool) {
        progress.setIndeterminate(bool);
    }
    
    public void setProgressValue(int val) {
        progress.setValue(val);
    }
    
    public String getEssid() {
        return essidBox.getSelectedItem().toString();
    }
    
    public void addEssid(String essid) {
        essidBox.addItem(essid);
    }
    
//    public void setEssid(String essid) {
//        ESSIDField.setText(essid);
//    }
    
    public void enableConnection(boolean b) {
        connectButton.setEnabled(b);
    }
    
    public void enableDisconnect(boolean b) {
        disconnectButton.setEnabled(b);
    }
    
    public void addToInterfaceBox(String x) {
        interfaceBox.addItem(x);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        encryptionButtonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        disconnectButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        WEPButton = new javax.swing.JRadioButton();
        encryptionCheckBox = new javax.swing.JCheckBox();
        WPAButton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        encryptionKeyTextField = new javax.swing.JTextField();
        progress = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        interfaceBox = new javax.swing.JComboBox();
        essidBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(HIDE_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setText("ESSID");

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel1.setText("blip Version " + version);

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel3.setText("Interface");

        disconnectButton.setText("Disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        encryptionButtonGroup.add(WEPButton);
        WEPButton.setText("WEP");

        encryptionCheckBox.setText("Encrypted");
        encryptionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptionCheckBoxActionPerformed(evt);
            }
        });

        encryptionButtonGroup.add(WPAButton);
        WPAButton.setText("WPA");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel4.setText("Key:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(WEPButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(WPAButton))
                            .addComponent(encryptionCheckBox))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encryptionKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 8, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encryptionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WEPButton)
                    .addComponent(WPAButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(encryptionKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        progressLabel.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(disconnectButton)
                                .addGap(32, 32, 32))
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(interfaceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(essidBox, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(interfaceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(essidBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(disconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(connectButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84))
        );

        jTabbedPane1.addTab("Connect", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptionCheckBoxActionPerformed
        checkEncryptionBox();
    }//GEN-LAST:event_encryptionCheckBoxActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        shutEverythingDown();
        Log.info("Disconnected.");
        connectButton.setEnabled(true);
        disconnectButton.setEnabled(false);
        progressLabel.setText("Not connected");
        progress.setValue(0);
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if (!missingFields()) {
            progress.setIndeterminate(true);
            shutEverythingDown();
            if (!setInterfaceUp()) {
                return;
            }
            if (!connectToESSID()) {
                return;
            }
            if (encryptionCheckBox.isSelected()) {
                hideEncryptionKey();
                if(WPAButton.isSelected()) {
                    handleWPA();
                }
            }
            try {
                config.saveSettings();
            } catch (IOException ex) {
                Log.severe("Unable to save settings!");
            }
        }    
    }//GEN-LAST:event_connectButtonActionPerformed
    
    private void shutEverythingDown() {
        inter = interfaceBox.getSelectedItem().toString();
        Log.debug("Setting " + inter + " down");
        Log.debug("Setting interface down");
        Command.setInterfaceDown(inter);
        Log.debug("Shutting down dhcpcd");
        Command.killdhcpcd();
        Log.debug("Shutting down wpa_supplicant");
        Command.killWpa_Supplicant();
    }
    
    private void hideEncryptionKey() {
        StringBuilder sb = new StringBuilder();
        int length = encryptionKeyTextField.getText().length();
        for(int i=0;i<length;i++) {
            sb.append("*");
        }
        encryptionKeyTextField.setText(sb.toString());
    }
    
    public void setPrivateEncryptionKey(int length) {
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<length;i++) {
            sb.append("*");
        }
        encryptionKeyTextField.setText(sb.toString());
    }
    
    private boolean connectToESSID() {
            essid = essidBox.getSelectedItem().toString();
            progressLabel.setText("Connecting to " + essid); 
//            Executor.getInstance().addToQueue(Command.connectToESSID(inter, essid));
//            status = Executor.getInstance().getStatus();
            if (status != 0) {
                Log.severe("Couldn't connect to " + essid);
                progressLabel.setText("Couldn't connect to " + essid);
                progress.setIndeterminate(false);
                return false;
            }
            Log.info("Connected to " + essid);
            return true;
    }
    
    private boolean setInterfaceUp() {
            inter = interfaceBox.getSelectedItem().toString();
            progressLabel.setText("Putting " + inter + " up...");
//            Executor.getInstance().addToQueue(Command.setInterfaceUp(inter));
//            status = Executor.getInstance().getStatus();
            if (status != 0) {
                Log.severe("Couldn't put " + inter + " up.");
                progressLabel.setText("Couldn't put " + inter + " up");
                progress.setIndeterminate(false);
                return false;
            }
            Log.info("Put " + inter + " up");
            return true;
            
    }
    
    private void handleWPA() {
        File wpa = new File("/etc/wpa_supplicant.conf");
        if (wpa.exists()) {
            Log.info("wpa_supplicant.conf found");
//            Executor.getInstance().addToQueue(Command.startWpa_Supplicant(inter));
//            status = Executor.getInstance().getStatus();
            if (status != 0) {
                Log.severe("Couldn't start wpa_supplicant!");
                progressLabel.setText("Couldn't start wpa_supplicant");
                progress.setIndeterminate(false);
                return;
            }
            startDHCP();
        } else {
            Log.info("wpa_supplicant file not found");
            
           //TODO create wpa_supplicant file... 
        }
    }
    
    private boolean missingFields() {
        if(encryptionCheckBox.isSelected()) {
            if (encryptionKeyTextField.getText().length() == 0) {
                progressLabel.setText("Encryption key unspecified");
                return true;
            }
        }
        return false;
    }
    
    private void startDHCP() {
        Log.info("Starting DHCPCD");
        progressLabel.setText("Starting dhcpcd...");
//        Executor.getInstance().addToQueue(Command.dhcpcd(inter));
        //status = Executor.execute(Command.dhcpcd(inter));
        try {
            Thread.sleep(5000);
        } catch (Exception ex) {
            Log.debug("Couldn't sleep!");
        }
        
        //This is creating incredibly embarassing results..
//        if (status != 0) {
//            Log.severe("Couldn't start dhcpcd");
//            progressLabel.setText("Couldn't start dhcpcd");
//            progress.setIndeterminate(false);
//            return;
//        }
//        Log.info("Dhcpcd started successfully");
//        try {
//            conTest.sleep(10000);
//        } catch (InterruptedException ex) {
//            Log.warning("Connection test thread couldn't sleep");
//        }
    }
    
    private void centerWindow() {
        Toolkit tk = getToolkit();
        Dimension d = tk.getScreenSize();
        int width = (int) (d.getWidth() / 3) + 140;
        int height = (int) (d.getHeight() / 3) - 50;
        this.setLocation(width, height);       
    }
    
    public int getInterface() {
        return interfaceBox.getSelectedIndex();
    }
    
    public void setInterface(int index) {
        interfaceBox.setSelectedIndex(index);
    }
    
    public boolean isEncrypted() {
        return encryptionCheckBox.isSelected();
    }
    
    public void setEncrypted(boolean b) {
        encryptionCheckBox.setSelected(b);
    }
    
    public boolean isWPA() {
        return WPAButton.isSelected();
    }
    
    public void setWPA(boolean b) {
        WPAButton.setSelected(b);
    }
    
    public boolean isWEP() {
        return WEPButton.isSelected();
    }
    
    public void setWEP(boolean b) {
        WEPButton.setSelected(b);
    }
    
    public String getEncryptionKey() {
        return encryptionKeyTextField.getText();
    }
    
    public void setEncryptionKey(String key) {
        encryptionKeyTextField.setText(key);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Log l = new Log();
        if (args.length > 0) {
            String arg = args[0];
            if (arg.equalsIgnoreCase("debug")) {
                Log.setLevel(Level.FINEST);
                Log.debug("Debug enabled");
            }
        }
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlipUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlipUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlipUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlipUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new BlipUI().setVisible(true);
            }
        });
    }
    
    public void setUIVisible(Boolean b) {
        this.setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JRadioButton WEPButton;
    private static javax.swing.JRadioButton WPAButton;
    private static javax.swing.JButton connectButton;
    private static javax.swing.JButton disconnectButton;
    private javax.swing.ButtonGroup encryptionButtonGroup;
    private static javax.swing.JCheckBox encryptionCheckBox;
    private static javax.swing.JTextField encryptionKeyTextField;
    private javax.swing.JComboBox essidBox;
    private javax.swing.JComboBox interfaceBox;
    private static final javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private static javax.swing.JProgressBar progress;
    private static javax.swing.JLabel progressLabel;
    // End of variables declaration//GEN-END:variables

}
