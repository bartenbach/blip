/*
 * BLICS
 * Attribute Only (Public) License
    Version 0.a5, Feb 07, 2012
    
Copyright (C) 2012 Blake Bartenbach <SeeD419@gmail.com> (@SeeD419)

Anyone is allowed to copy and distribute verbatim or modified 
copies of this license document and altering is allowed as long 
as you attribute the author(s) of this license document / files.
*/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package blics;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**
 *
 * @author seed419
 */
public class BLICSGUI extends javax.swing.JFrame {
    
    
    private static final String version = "0.1 Alpha";
    private static final long serialVersionUID = 1L;
    private String inter;
    private String essid;
    private int uid = 999;
    private int status = 999;

    
    /**
     * Creates new form BLICSGUI
     */
    public BLICSGUI() {
        String Suid = Executor.read(Command.getUID());
        try {
            uid = Integer.parseInt(Suid);
            Log.info("UID: " + uid);
        } catch (NumberFormatException n) {
            Log.severe("Recieved unrecognized uid!");
        }
        centerWindow();
        initComponents();
        if(uid != 0) {
            JOptionPane.showMessageDialog(null, "You must run blics as root!", "Blics", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        encryptionButtonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ESSIDField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        InterfaceField = new javax.swing.JTextField();
        disconnectButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        WEPButton = new javax.swing.JRadioButton();
        encryptionCheckBox = new javax.swing.JCheckBox();
        WPAButton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        encryptionKeyTextField = new javax.swing.JTextField();
        progress = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setText("ESSID");

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel1.setText("BLICS Version " + version);

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel3.setText("Interface");

        InterfaceField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        InterfaceField.setText("wlan0");

        disconnectButton.setText("Disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        encryptionButtonGroup.add(WEPButton);
        WEPButton.setText("WEP");

        encryptionCheckBox.setText("Encrypted");
        encryptionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptionCheckBoxActionPerformed(evt);
            }
        });

        encryptionButtonGroup.add(WPAButton);
        WPAButton.setText("WPA");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel4.setText("Key:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(WEPButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(WPAButton))
                            .addComponent(encryptionCheckBox))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encryptionKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 8, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encryptionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WEPButton)
                    .addComponent(WPAButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(encryptionKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        progressLabel.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(disconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(InterfaceField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(31, 31, 31)
                                    .addComponent(ESSIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(InterfaceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ESSIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(disconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 11, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Connect", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptionCheckBoxActionPerformed
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            WPAButton.setSelected(true);
            WPAButton.setEnabled(true);
            WEPButton.setEnabled(true);
            encryptionKeyTextField.setEnabled(true);
        } else if (!box.isSelected()) {
            WPAButton.setEnabled(false);
            WEPButton.setEnabled(false);
            encryptionKeyTextField.setEnabled(false);
        }
    }//GEN-LAST:event_encryptionCheckBoxActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        if (InterfaceField.getText().length() == 0) {
            progressLabel.setText("Interface undefined");
            return;
        } 
        inter = InterfaceField.getText();
        int ping = Executor.execute(Command.ping());
        if (ping == 0) {
            Executor.execute(Command.setInterfaceDown(inter));
            Executor.execute(Command.killdhcpcd());
            Executor.execute(Command.killWpa_Supplicant());
        } else {
            Executor.execute(Command.setInterfaceDown(inter));
            Executor.execute(Command.killdhcpcd());
            Executor.execute(Command.killWpa_Supplicant());
            progressLabel.setText("You aren't currently connected to a network");
        }
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        int ping = Executor.execute(Command.ping());
        if(ping == 0) {
            progressLabel.setText("You are already connected to the internet =)");
            return;
        }
        if (InterfaceField.getText().length() == 0) {
            progressLabel.setText("Interface undefined");
            return;
        }
        if (ESSIDField.getText().length() == 0) {
            progressLabel.setText("ESSID unspecified");
            return;
        }
        if(encryptionCheckBox.isSelected()) {
            if (encryptionKeyTextField.getText().length() == 0) {
                progressLabel.setText("Encryption key unspecified");
                return;
            }
        }
        progress.setIndeterminate(true);
        
        //Put interface up
        inter = InterfaceField.getText();
        progressLabel.setText("Putting " + inter + " up...");
        Executor.execute(Command.setInterfaceDown(inter));
        status = Executor.execute(Command.setInterfaceUp(inter));
        if (status != 0) {
            Log.severe("Couldn't put " + inter + " up.");
            progressLabel.setText("Couldn't put " + inter + " up");
            progress.setIndeterminate(false);
            return;
        } else {
            Log.info("Put " + inter + " up");
        }     
        
        //Connect to essid
        essid = ESSIDField.getText();
        progressLabel.setText("Connecting to " + essid);        
        status = Executor.execute(Command.connectToESSID(inter, essid));
        if (status != 0) {
            Log.severe("Couldn't connect to " + essid);
            progressLabel.setText("Couldn't connect to " + essid);
            progress.setIndeterminate(false);
            return;
        } else {
            Log.info("Connected to " + essid);
        }
        
        //Kill dhcpcd
        Executor.execute(Command.killdhcpcd());
        if (encryptionCheckBox.isSelected()) {
            if(WPAButton.isSelected()) {
                handleWPA();
            }
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void handleWPA() {
        File wpa = new File("/etc/wpa_supplicant.conf");
        if (wpa.exists()) {
            Log.info("wpa_supplicant.conf found");
            status = Executor.execute(Command.startWpa_Supplicant(inter));
            if (status != 0) {
                Log.severe("Couldn't start wpa_supplicant!");
                progressLabel.setText("Couldn't start wpa_supplicant");
                progress.setIndeterminate(false);
                return;
            }
            startDHCP();
        } else {
           // create wpa_supplicant file... 
        }
    }
    
    private void startDHCP() {
        Log.info("Starting DHCPCD");
        progressLabel.setText("Starting dhcpcd...");
        status = Executor.execute(Command.dhcpcd(inter));
        if (status != 0) {
            Log.severe("Couldn't start dhcpcd");
            progressLabel.setText("Couldn't start dhcpcd");
            progress.setIndeterminate(false);
            return;
        }
        progressLabel.setText("Connected to " + essid);       
        progress.setIndeterminate(false);
        progress.setValue(100);
    }
    
    private void centerWindow() {
        Toolkit tk = getToolkit();
        Dimension d = tk.getScreenSize();
        int width = (int) (d.getWidth() / 3) + 140;
        int height = (int) (d.getHeight() / 3) - 50;
        this.setLocation(width, height);       
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BLICSGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BLICSGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BLICSGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BLICSGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                Log l = new Log();
                new BLICSGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ESSIDField;
    private javax.swing.JTextField InterfaceField;
    private javax.swing.JRadioButton WEPButton;
    private javax.swing.JRadioButton WPAButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.ButtonGroup encryptionButtonGroup;
    private javax.swing.JCheckBox encryptionCheckBox;
    private javax.swing.JTextField encryptionKeyTextField;
    private static final javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JProgressBar progress;
    private javax.swing.JLabel progressLabel;
    // End of variables declaration//GEN-END:variables

}
